use std::str::Chars;

type Frame = [[u8; 8]; 8];

fn read_base16_byte(fst: char, snd: char) -> u8 {
    match (fst, snd) {
        ('0', '0') => 0x00,
        ('0', '1') => 0x01,
        ('0', '2') => 0x02,
        ('0', '3') => 0x03,
        ('0', '4') => 0x04,
        ('0', '5') => 0x05,
        ('0', '6') => 0x06,
        ('0', '7') => 0x07,
        ('0', '8') => 0x08,
        ('0', '9') => 0x09,
        ('0', 'a') => 0x0A,
        ('0', 'A') => 0x0A,
        ('0', 'b') => 0x0B,
        ('0', 'B') => 0x0B,
        ('0', 'c') => 0x0C,
        ('0', 'C') => 0x0C,
        ('0', 'd') => 0x0D,
        ('0', 'D') => 0x0D,
        ('0', 'e') => 0x0E,
        ('0', 'E') => 0x0E,
        ('0', 'f') => 0x0F,
        ('0', 'F') => 0x0F,
        ('1', '0') => 0x10,
        ('1', '1') => 0x11,
        ('1', '2') => 0x12,
        ('1', '3') => 0x13,
        ('1', '4') => 0x14,
        ('1', '5') => 0x15,
        ('1', '6') => 0x16,
        ('1', '7') => 0x17,
        ('1', '8') => 0x18,
        ('1', '9') => 0x19,
        ('1', 'a') => 0x1A,
        ('1', 'A') => 0x1A,
        ('1', 'b') => 0x1B,
        ('1', 'B') => 0x1B,
        ('1', 'c') => 0x1C,
        ('1', 'C') => 0x1C,
        ('1', 'd') => 0x1D,
        ('1', 'D') => 0x1D,
        ('1', 'e') => 0x1E,
        ('1', 'E') => 0x1E,
        ('1', 'f') => 0x1F,
        ('1', 'F') => 0x1F,
        ('2', '0') => 0x20,
        ('2', '1') => 0x21,
        ('2', '2') => 0x22,
        ('2', '3') => 0x23,
        ('2', '4') => 0x24,
        ('2', '5') => 0x25,
        ('2', '6') => 0x26,
        ('2', '7') => 0x27,
        ('2', '8') => 0x28,
        ('2', '9') => 0x29,
        ('2', 'a') => 0x2A,
        ('2', 'A') => 0x2A,
        ('2', 'b') => 0x2B,
        ('2', 'B') => 0x2B,
        ('2', 'c') => 0x2C,
        ('2', 'C') => 0x2C,
        ('2', 'd') => 0x2D,
        ('2', 'D') => 0x2D,
        ('2', 'e') => 0x2E,
        ('2', 'E') => 0x2E,
        ('2', 'f') => 0x2F,
        ('2', 'F') => 0x2F,
        ('3', '0') => 0x30,
        ('3', '1') => 0x31,
        ('3', '2') => 0x32,
        ('3', '3') => 0x33,
        ('3', '4') => 0x34,
        ('3', '5') => 0x35,
        ('3', '6') => 0x36,
        ('3', '7') => 0x37,
        ('3', '8') => 0x38,
        ('3', '9') => 0x39,
        ('3', 'a') => 0x3A,
        ('3', 'A') => 0x3A,
        ('3', 'b') => 0x3B,
        ('3', 'B') => 0x3B,
        ('3', 'c') => 0x3C,
        ('3', 'C') => 0x3C,
        ('3', 'd') => 0x3D,
        ('3', 'D') => 0x3D,
        ('3', 'e') => 0x3E,
        ('3', 'E') => 0x3E,
        ('3', 'f') => 0x3F,
        ('3', 'F') => 0x3F,
        ('4', '0') => 0x40,
        ('4', '1') => 0x41,
        ('4', '2') => 0x42,
        ('4', '3') => 0x43,
        ('4', '4') => 0x44,
        ('4', '5') => 0x45,
        ('4', '6') => 0x46,
        ('4', '7') => 0x47,
        ('4', '8') => 0x48,
        ('4', '9') => 0x49,
        ('4', 'a') => 0x4A,
        ('4', 'A') => 0x4A,
        ('4', 'b') => 0x4B,
        ('4', 'B') => 0x4B,
        ('4', 'c') => 0x4C,
        ('4', 'C') => 0x4C,
        ('4', 'd') => 0x4D,
        ('4', 'D') => 0x4D,
        ('4', 'e') => 0x4E,
        ('4', 'E') => 0x4E,
        ('4', 'f') => 0x4F,
        ('4', 'F') => 0x4F,
        ('5', '0') => 0x50,
        ('5', '1') => 0x51,
        ('5', '2') => 0x52,
        ('5', '3') => 0x53,
        ('5', '4') => 0x54,
        ('5', '5') => 0x55,
        ('5', '6') => 0x56,
        ('5', '7') => 0x57,
        ('5', '8') => 0x58,
        ('5', '9') => 0x59,
        ('5', 'a') => 0x5A,
        ('5', 'A') => 0x5A,
        ('5', 'b') => 0x5B,
        ('5', 'B') => 0x5B,
        ('5', 'c') => 0x5C,
        ('5', 'C') => 0x5C,
        ('5', 'd') => 0x5D,
        ('5', 'D') => 0x5D,
        ('5', 'e') => 0x5E,
        ('5', 'E') => 0x5E,
        ('5', 'f') => 0x5F,
        ('5', 'F') => 0x5F,
        ('6', '0') => 0x60,
        ('6', '1') => 0x61,
        ('6', '2') => 0x62,
        ('6', '3') => 0x63,
        ('6', '4') => 0x64,
        ('6', '5') => 0x65,
        ('6', '6') => 0x66,
        ('6', '7') => 0x67,
        ('6', '8') => 0x68,
        ('6', '9') => 0x69,
        ('6', 'a') => 0x6A,
        ('6', 'A') => 0x6A,
        ('6', 'b') => 0x6B,
        ('6', 'B') => 0x6B,
        ('6', 'c') => 0x6C,
        ('6', 'C') => 0x6C,
        ('6', 'd') => 0x6D,
        ('6', 'D') => 0x6D,
        ('6', 'e') => 0x6E,
        ('6', 'E') => 0x6E,
        ('6', 'f') => 0x6F,
        ('6', 'F') => 0x6F,
        ('7', '0') => 0x70,
        ('7', '1') => 0x71,
        ('7', '2') => 0x72,
        ('7', '3') => 0x73,
        ('7', '4') => 0x74,
        ('7', '5') => 0x75,
        ('7', '6') => 0x76,
        ('7', '7') => 0x77,
        ('7', '8') => 0x78,
        ('7', '9') => 0x79,
        ('7', 'a') => 0x7A,
        ('7', 'A') => 0x7A,
        ('7', 'b') => 0x7B,
        ('7', 'B') => 0x7B,
        ('7', 'c') => 0x7C,
        ('7', 'C') => 0x7C,
        ('7', 'd') => 0x7D,
        ('7', 'D') => 0x7D,
        ('7', 'e') => 0x7E,
        ('7', 'E') => 0x7E,
        ('7', 'f') => 0x7F,
        ('7', 'F') => 0x7F,
        ('8', '0') => 0x80,
        ('8', '1') => 0x81,
        ('8', '2') => 0x82,
        ('8', '3') => 0x83,
        ('8', '4') => 0x84,
        ('8', '5') => 0x85,
        ('8', '6') => 0x86,
        ('8', '7') => 0x87,
        ('8', '8') => 0x88,
        ('8', '9') => 0x89,
        ('8', 'a') => 0x8A,
        ('8', 'A') => 0x8A,
        ('8', 'b') => 0x8B,
        ('8', 'B') => 0x8B,
        ('8', 'c') => 0x8C,
        ('8', 'C') => 0x8C,
        ('8', 'd') => 0x8D,
        ('8', 'D') => 0x8D,
        ('8', 'e') => 0x8E,
        ('8', 'E') => 0x8E,
        ('8', 'f') => 0x8F,
        ('8', 'F') => 0x8F,
        ('9', '0') => 0x90,
        ('9', '1') => 0x91,
        ('9', '2') => 0x92,
        ('9', '3') => 0x93,
        ('9', '4') => 0x94,
        ('9', '5') => 0x95,
        ('9', '6') => 0x96,
        ('9', '7') => 0x97,
        ('9', '8') => 0x98,
        ('9', '9') => 0x99,
        ('9', 'a') => 0x9A,
        ('9', 'A') => 0x9A,
        ('9', 'b') => 0x9B,
        ('9', 'B') => 0x9B,
        ('9', 'c') => 0x9C,
        ('9', 'C') => 0x9C,
        ('9', 'd') => 0x9D,
        ('9', 'D') => 0x9D,
        ('9', 'e') => 0x9E,
        ('9', 'E') => 0x9E,
        ('9', 'f') => 0x9F,
        ('9', 'F') => 0x9F,
        ('a', '0') => 0xA0,
        ('a', '1') => 0xA1,
        ('a', '2') => 0xA2,
        ('a', '3') => 0xA3,
        ('a', '4') => 0xA4,
        ('a', '5') => 0xA5,
        ('a', '6') => 0xA6,
        ('a', '7') => 0xA7,
        ('a', '8') => 0xA8,
        ('a', '9') => 0xA9,
        ('a', 'a') => 0xAA,
        ('a', 'A') => 0xAA,
        ('a', 'b') => 0xAB,
        ('a', 'B') => 0xAB,
        ('a', 'c') => 0xAC,
        ('a', 'C') => 0xAC,
        ('a', 'd') => 0xAD,
        ('a', 'D') => 0xAD,
        ('a', 'e') => 0xAE,
        ('a', 'E') => 0xAE,
        ('a', 'f') => 0xAF,
        ('a', 'F') => 0xAF,
        ('A', '0') => 0xA0,
        ('A', '1') => 0xA1,
        ('A', '2') => 0xA2,
        ('A', '3') => 0xA3,
        ('A', '4') => 0xA4,
        ('A', '5') => 0xA5,
        ('A', '6') => 0xA6,
        ('A', '7') => 0xA7,
        ('A', '8') => 0xA8,
        ('A', '9') => 0xA9,
        ('A', 'a') => 0xAA,
        ('A', 'A') => 0xAA,
        ('A', 'b') => 0xAB,
        ('A', 'B') => 0xAB,
        ('A', 'c') => 0xAC,
        ('A', 'C') => 0xAC,
        ('A', 'd') => 0xAD,
        ('A', 'D') => 0xAD,
        ('A', 'e') => 0xAE,
        ('A', 'E') => 0xAE,
        ('A', 'f') => 0xAF,
        ('A', 'F') => 0xAF,
        ('b', '0') => 0xB0,
        ('b', '1') => 0xB1,
        ('b', '2') => 0xB2,
        ('b', '3') => 0xB3,
        ('b', '4') => 0xB4,
        ('b', '5') => 0xB5,
        ('b', '6') => 0xB6,
        ('b', '7') => 0xB7,
        ('b', '8') => 0xB8,
        ('b', '9') => 0xB9,
        ('b', 'a') => 0xBA,
        ('b', 'A') => 0xBA,
        ('b', 'b') => 0xBB,
        ('b', 'B') => 0xBB,
        ('b', 'c') => 0xBC,
        ('b', 'C') => 0xBC,
        ('b', 'd') => 0xBD,
        ('b', 'D') => 0xBD,
        ('b', 'e') => 0xBE,
        ('b', 'E') => 0xBE,
        ('b', 'f') => 0xBF,
        ('b', 'F') => 0xBF,
        ('B', '0') => 0xB0,
        ('B', '1') => 0xB1,
        ('B', '2') => 0xB2,
        ('B', '3') => 0xB3,
        ('B', '4') => 0xB4,
        ('B', '5') => 0xB5,
        ('B', '6') => 0xB6,
        ('B', '7') => 0xB7,
        ('B', '8') => 0xB8,
        ('B', '9') => 0xB9,
        ('B', 'a') => 0xBA,
        ('B', 'A') => 0xBA,
        ('B', 'b') => 0xBB,
        ('B', 'B') => 0xBB,
        ('B', 'c') => 0xBC,
        ('B', 'C') => 0xBC,
        ('B', 'd') => 0xBD,
        ('B', 'D') => 0xBD,
        ('B', 'e') => 0xBE,
        ('B', 'E') => 0xBE,
        ('B', 'f') => 0xBF,
        ('B', 'F') => 0xBF,
        ('c', '0') => 0xC0,
        ('c', '1') => 0xC1,
        ('c', '2') => 0xC2,
        ('c', '3') => 0xC3,
        ('c', '4') => 0xC4,
        ('c', '5') => 0xC5,
        ('c', '6') => 0xC6,
        ('c', '7') => 0xC7,
        ('c', '8') => 0xC8,
        ('c', '9') => 0xC9,
        ('c', 'a') => 0xCA,
        ('c', 'A') => 0xCA,
        ('c', 'b') => 0xCB,
        ('c', 'B') => 0xCB,
        ('c', 'c') => 0xCC,
        ('c', 'C') => 0xCC,
        ('c', 'd') => 0xCD,
        ('c', 'D') => 0xCD,
        ('c', 'e') => 0xCE,
        ('c', 'E') => 0xCE,
        ('c', 'f') => 0xCF,
        ('c', 'F') => 0xCF,
        ('C', '0') => 0xC0,
        ('C', '1') => 0xC1,
        ('C', '2') => 0xC2,
        ('C', '3') => 0xC3,
        ('C', '4') => 0xC4,
        ('C', '5') => 0xC5,
        ('C', '6') => 0xC6,
        ('C', '7') => 0xC7,
        ('C', '8') => 0xC8,
        ('C', '9') => 0xC9,
        ('C', 'a') => 0xCA,
        ('C', 'A') => 0xCA,
        ('C', 'b') => 0xCB,
        ('C', 'B') => 0xCB,
        ('C', 'c') => 0xCC,
        ('C', 'C') => 0xCC,
        ('C', 'd') => 0xCD,
        ('C', 'D') => 0xCD,
        ('C', 'e') => 0xCE,
        ('C', 'E') => 0xCE,
        ('C', 'f') => 0xCF,
        ('C', 'F') => 0xCF,
        ('d', '0') => 0xD0,
        ('d', '1') => 0xD1,
        ('d', '2') => 0xD2,
        ('d', '3') => 0xD3,
        ('d', '4') => 0xD4,
        ('d', '5') => 0xD5,
        ('d', '6') => 0xD6,
        ('d', '7') => 0xD7,
        ('d', '8') => 0xD8,
        ('d', '9') => 0xD9,
        ('d', 'a') => 0xDA,
        ('d', 'A') => 0xDA,
        ('d', 'b') => 0xDB,
        ('d', 'B') => 0xDB,
        ('d', 'c') => 0xDC,
        ('d', 'C') => 0xDC,
        ('d', 'd') => 0xDD,
        ('d', 'D') => 0xDD,
        ('d', 'e') => 0xDE,
        ('d', 'E') => 0xDE,
        ('d', 'f') => 0xDF,
        ('d', 'F') => 0xDF,
        ('D', '0') => 0xD0,
        ('D', '1') => 0xD1,
        ('D', '2') => 0xD2,
        ('D', '3') => 0xD3,
        ('D', '4') => 0xD4,
        ('D', '5') => 0xD5,
        ('D', '6') => 0xD6,
        ('D', '7') => 0xD7,
        ('D', '8') => 0xD8,
        ('D', '9') => 0xD9,
        ('D', 'a') => 0xDA,
        ('D', 'A') => 0xDA,
        ('D', 'b') => 0xDB,
        ('D', 'B') => 0xDB,
        ('D', 'c') => 0xDC,
        ('D', 'C') => 0xDC,
        ('D', 'd') => 0xDD,
        ('D', 'D') => 0xDD,
        ('D', 'e') => 0xDE,
        ('D', 'E') => 0xDE,
        ('D', 'f') => 0xDF,
        ('D', 'F') => 0xDF,
        ('e', '0') => 0xE0,
        ('e', '1') => 0xE1,
        ('e', '2') => 0xE2,
        ('e', '3') => 0xE3,
        ('e', '4') => 0xE4,
        ('e', '5') => 0xE5,
        ('e', '6') => 0xE6,
        ('e', '7') => 0xE7,
        ('e', '8') => 0xE8,
        ('e', '9') => 0xE9,
        ('e', 'a') => 0xEA,
        ('e', 'A') => 0xEA,
        ('e', 'b') => 0xEB,
        ('e', 'B') => 0xEB,
        ('e', 'c') => 0xEC,
        ('e', 'C') => 0xEC,
        ('e', 'd') => 0xED,
        ('e', 'D') => 0xED,
        ('e', 'e') => 0xEE,
        ('e', 'E') => 0xEE,
        ('e', 'f') => 0xEF,
        ('e', 'F') => 0xEF,
        ('E', '0') => 0xE0,
        ('E', '1') => 0xE1,
        ('E', '2') => 0xE2,
        ('E', '3') => 0xE3,
        ('E', '4') => 0xE4,
        ('E', '5') => 0xE5,
        ('E', '6') => 0xE6,
        ('E', '7') => 0xE7,
        ('E', '8') => 0xE8,
        ('E', '9') => 0xE9,
        ('E', 'a') => 0xEA,
        ('E', 'A') => 0xEA,
        ('E', 'b') => 0xEB,
        ('E', 'B') => 0xEB,
        ('E', 'c') => 0xEC,
        ('E', 'C') => 0xEC,
        ('E', 'd') => 0xED,
        ('E', 'D') => 0xED,
        ('E', 'e') => 0xEE,
        ('E', 'E') => 0xEE,
        ('E', 'f') => 0xEF,
        ('E', 'F') => 0xEF,
        ('f', '0') => 0xF0,
        ('f', '1') => 0xF1,
        ('f', '2') => 0xF2,
        ('f', '3') => 0xF3,
        ('f', '4') => 0xF4,
        ('f', '5') => 0xF5,
        ('f', '6') => 0xF6,
        ('f', '7') => 0xF7,
        ('f', '8') => 0xF8,
        ('f', '9') => 0xF9,
        ('f', 'a') => 0xFA,
        ('f', 'A') => 0xFA,
        ('f', 'b') => 0xFB,
        ('f', 'B') => 0xFB,
        ('f', 'c') => 0xFC,
        ('f', 'C') => 0xFC,
        ('f', 'd') => 0xFD,
        ('f', 'D') => 0xFD,
        ('f', 'e') => 0xFE,
        ('f', 'E') => 0xFE,
        ('f', 'f') => 0xFF,
        ('f', 'F') => 0xFF,
        ('F', '0') => 0xF0,
        ('F', '1') => 0xF1,
        ('F', '2') => 0xF2,
        ('F', '3') => 0xF3,
        ('F', '4') => 0xF4,
        ('F', '5') => 0xF5,
        ('F', '6') => 0xF6,
        ('F', '7') => 0xF7,
        ('F', '8') => 0xF8,
        ('F', '9') => 0xF9,
        ('F', 'a') => 0xFA,
        ('F', 'A') => 0xFA,
        ('F', 'b') => 0xFB,
        ('F', 'B') => 0xFB,
        ('F', 'c') => 0xFC,
        ('F', 'C') => 0xFC,
        ('F', 'd') => 0xFD,
        ('F', 'D') => 0xFD,
        ('F', 'e') => 0xFE,
        ('F', 'E') => 0xFE,
        ('F', 'f') => 0xFF,
        ('F', 'F') => 0xFF,
        _ => 0,
    }
}

struct Pairs<'a> {
    content: Chars<'a>,
}

impl Iterator for Pairs<'_> {
    type Item = (char, char);

    fn next(&mut self) -> Option<Self::Item> {
        self.content.next().zip(self.content.next())
    }
}

pub fn read_base16_frame(s: &str) -> Result<Frame, String> {
    let pairs = Pairs { content: s.chars() };

    let data: Vec<u8> = pairs
        .into_iter()
        .take(64)
        .map(|(fst, snd)| read_base16_byte(fst, snd))
        .collect();
    if data.len() < 64 {
        return Err(format!("Less than 64 elements: {}", data.len()));
    }

    let parts: Vec<[u8; 8]> = data
        .chunks_exact(8)
        .map(|x| x.try_into().unwrap())
        .collect();
    return Ok(parts.try_into().unwrap());
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn read_good_frame() {
        let result = read_base16_frame(&"0".repeat(128));
        assert_eq!(Ok([[0; 8]; 8]), result);

        let result2 = read_base16_frame(&"f".repeat(128));
        assert_eq!(Ok([[255; 8]; 8]), result2);

        let result3 = read_base16_frame(&"0F".repeat(64));
        assert_eq!(Ok([[15; 8]; 8]), result3);

        let result4 = read_base16_frame(&"3f00ff40".repeat(16));
        assert_eq!(Ok([[63, 0, 255, 64, 63, 0, 255, 64]; 8]), result4);
    }

    #[test]
    fn read_bad_frame() {
        let result = read_base16_frame("too short");
        assert_eq!(Err("Less than 64 elements: 4".to_owned()), result);
    }

    #[test]
    fn convert_junk_to_zeros() {
        let result = read_base16_frame(&"x".repeat(128));
        assert_eq!(Ok([[0; 8]; 8]), result);
    }
}
